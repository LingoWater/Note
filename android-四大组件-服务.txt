http://www.cnblogs.com/pepcod/archive/2013/02/11/2937403.html
http://www.cnblogs.com/bravestarrhu/archive/2012/05/02/2479461.html
http://www.cnblogs.com/yuzhongzheng/p/5228393.html

1、服务

	https://developer.android.com/guide/components/services.html

	服务可由其他应用组件启动，而且即使用户切换到其他应用，服务仍将在后台继续运行。
	
	组件可以绑定到服务，以与之进行交互，甚至是执行进程间通信 (IPC)。 例如，服务可以处理网络事务、播放音乐，执行文件 I/O 或与
	内容提供程序交互，而所有这一切均可在后台进行。
	
	服务基本上分为两种形式：

	启动
	当应用组件（如 Activity）通过调用 startService() 启动服务时，服务即处于“启动”状态。一旦启动，服务即可在后台无限期运行，
	即使启动服务的组件已被销毁也不受影响。 已启动的服务通常是执行单一操作，而且不会将结果返回给调用方。
	例如，它可能通过网络下载或上传文件。 操作完成后，服务会自行停止运行。

	绑定
	当应用组件通过调用 bindService() 绑定到服务时，服务即处于“绑定”状态。绑定服务提供了一个客户端-服务器接口，
	允许组件与服务进行交互、发送请求、获取结果，甚至是利用进程间通信 (IPC) 跨进程执行这些操作。 仅当与另一个应用组件绑定时，
	绑定服务才会运行。 多个组件可以同时绑定到该服务，但全部取消绑定后，该服务即会被销毁。

	虽然本文档是分开概括讨论这两种服务，但是您的服务可以同时以这两种方式运行，也就是说，它既可以是启动服务（以无限期运行），也允许绑定。
	问题只是在于您是否实现了一组回调方法：onStartCommand()（允许组件启动服务）和 onBind()（允许绑定服务）。

	无论应用是处于启动状态还是绑定状态，抑或处于启动并且绑定状态，任何应用组件均可像使用 Activity 那样通过调用 Intent 来
	使用服务（即使此服务来自另一应用）。 不过，您可以通过清单文件将服务声明为私有服务，并阻止其他应用访问。 

	注意：服务在其托管进程的主线程中运行，它既不创建自己的线程，也不在单独的进程中运行（除非另行指定）。 这意味着，
	如果服务将执行任何 CPU 密集型工作或阻止性操作（例如 MP3 播放或联网），则应在服务内创建新线程来完成这项工作。通过使用单独的线程，
	可以降低发生“应用无响应”(ANR) 错误的风险，而应用的主线程仍可继续专注于运行用户与 Activity 之间的交互。

	要创建服务，您必须创建 Service 的子类（或使用它的一个现有子类）。在实现中，您需要重写一些回调方法，应重写的最重要的回调方法包括：

		onStartCommand()
		当另一个组件（如 Activity）通过调用 startService() 请求启动服务时，系统将调用此方法。一旦执行此方法，
		服务即会启动并可在后台无限期运行。 如果您实现此方法，则在服务工作完成后，需要由您通过调用 stopSelf() 或 stopService() 来
		停止服务。（如果您只想提供绑定，则无需实现此方法。）

		onBind()
		当另一个组件想通过调用 bindService() 与服务绑定（例如执行 RPC）时，系统将调用此方法。在此方法的实现中，
		您必须通过返回 IBinder 提供一个接口，供客户端用来与服务进行通信。请务必实现此方法，但如果您并不希望允许绑定，则应返回 null。

		onCreate()
		首次创建服务时，系统将调用此方法来执行一次性设置程序（在调用 onStartCommand() 或 onBind() 之前）。如果服务已在运行，
		则不会调用此方法。

		onDestroy()
		当服务不再使用且将被销毁时，系统将调用此方法。服务应该实现此方法来清理所有资源，如线程、注册的侦听器、接收器等。
		这是服务接收的最后一个调用。

	如果组件通过调用 startService() 启动服务（这会导致对 onStartCommand() 的调用），则服务将一直运行，直到服务使用 stopSelf() 
	自行停止运行，或由其他组件通过调用 stopService() 停止它为止。

	如果组件是通过调用 bindService() 来创建服务（且未调用 onStartCommand()，则服务只会在该组件与其绑定时运行。
	一旦该服务与所有客户端之间的绑定全部取消，系统便会销毁它。

	仅当内存过低且必须回收系统资源以供具有用户焦点的 Activity 使用时，Android 系统才会强制停止服务。如果将服务绑定到具有用户焦点的 
	Activity，则它不太可能会终止；如果将服务声明为在前台运行（稍后讨论），则它几乎永远不会终止。

	如果服务已启动并要长时间运行，则系统会随着时间的推移降低服务在后台任务列表中的位置，而服务也将随之变得非常容易被终止；

	如果服务是启动服务，则您必须将其设计为能够妥善处理系统对它的重启。 如果系统终止服务，那么一旦资源变得再次可用，
	系统便会重启服务（不过这还取决于从 onStartCommand() 返回的值）。

	如同 Activity（以及其他组件）一样，您必须在应用的清单文件中声明所有服务。

	android:name 属性是唯一必需的属性，用于指定服务的类名。应用一旦发布，即不应更改此类名，如若不然，可
	能会存在因依赖显式 Intent 启动或绑定服务而破坏代码的风险

	为了确保应用的安全性，请始终使用显式 Intent 启动或绑定 Service，且不要为服务声明 Intent 过滤器。 
	启动哪个服务存在一定的不确定性(即还未确定会启动哪个服务)，而如果对这种不确定性的考量非常有必要，则可为服务提供 Intent 过滤器并从
	 Intent 中排除相应的组件名称，但随后必须使用 setPackage() 方法设置 Intent 的软件包，这样可以充分消除目标服务的不确定性。

	此外，还可以通过添加 android:exported 属性并将其设置为 "false"，确保服务仅适用于您的应用。这可以有效阻止其他应用启动您的服务，
	即便在使用显式 Intent 时也如此

	从传统上讲，您可以扩展两个类来创建启动服务：

	  IntentService
		这是 Service 的子类，它使用工作线程逐一处理所有启动请求。如果您不要求服务同时处理多个请求，这是最好的选择。
		您只需实现 onHandleIntent() 方法即可，该方法会接收每个启动请求的 Intent，使您能够执行后台工作。在处理完所有启动请求后
		自动停止服务，因此您永远不必手动调用 stopSelf()。

		由于大多数启动服务都不必同时处理多个请求（实际上，这种多线程情况可能很危险），因此使用 IntentService 类实现服务也许是
		最好的选择。

		您只需要一个构造函数和一个 onHandleIntent() 实现即可。如果您决定还重写其他回调方法（如 onCreate()、onStartCommand() 或 
		onDestroy()），请确保调用超类实现，以便 IntentService 能够妥善处理工作线程的生命周期

		如果您重写onStartCommand() 必须返回默认实现(return super.onStartCommand(intent,flags,startId)),除 onHandleIntent() 之外，
		您无需从中调用超类的唯一方法就是 onBind()（仅当服务允许绑定时，才需要实现该方法）。

	  Service
		这是适用于所有服务的基类。扩展此类时，必须创建一个用于执行所有服务工作的新线程，因为默认情况下，服务将使用应用的主线程，
		这会降低应用正在运行的所有 Activity 的性能。

		若要求服务执行多线程（而不是通过工作队列处理启动请求），则可扩展 Service 类来处理每个 Intent。

		
	请注意，onStartCommand() 方法必须返回整型数。用于描述系统应该如何在服务终止的情况下继续运行服务
	（如上所述，IntentService 的默认实现将为您处理这种情况，不过您可以对其进行修改）。从 onStartCommand() 返回的值必须是以下常量之一：

		START_NOT_STICKY
		如果系统在 onStartCommand() 返回后终止服务，则除非有挂起 Intent 要传递，否则系统不会重建服务。这是最安全的选项，
		可以避免在不必要时以及应用能够轻松重启所有未完成的作业时运行服务。

		START_STICKY
		如果系统在 onStartCommand() 返回后终止服务，则会重建服务并调用 onStartCommand()，但不会重新传递最后一个 Intent。相反，
		除非有挂起 Intent 要启动服务（在这种情况下，将传递这些 Intent ），否则系统会通过空 Intent 调用 onStartCommand()。
		这适用于不执行命令、但无限期运行并等待作业的媒体播放器（或类似服务）。

		START_REDELIVER_INTENT
		如果系统在 onStartCommand() 返回后终止服务，则会重建服务，并通过传递给服务的最后一个 Intent 调用 onStartCommand()。
		任何挂起 Intent 均依次传递。这适用于主动执行应该立即恢复的作业（例如下载文件）的服务。

	如果服务亦未提供绑定，则使用 startService() 传递的 Intent 是应用组件与服务之间唯一的通信模式。但是，如果您希望服务返回结果，
	则启动服务的客户端可以为广播创建一个 PendingIntent （使用 getBroadcast()），并通过启动服务的 Intent 传递给服务。
	然后，服务就可以使用广播传递结果。

	多个服务启动请求会导致多次对服务的 onStartCommand() 进行相应的调用。但是，要停止服务，只需一个服务停止请求
	（使用 stopSelf() 或 stopService()）即可。

	如果服务同时处理多个 onStartCommand() 请求，则您不应在处理完一个启动请求之后停止服务，因为您可能已经收到了新的启动请求
	（在第一个请求结束时停止服务会终止第二个请求）。为了避免这一问题，您可以使用 stopSelf(int) 确保服务停止请求始终基于最近的启动请求。
	也就说，在调用 stopSelf(int) 时，传递与停止请求的 ID 对应的启动请求的 ID（传递给 onStartCommand() 的 startId）。
	然后，如果在您能够调用 stopSelf(int) 之前服务收到了新的启动请求，ID 就不匹配，服务也就不会停止。

	注意：为了避免浪费系统资源和消耗电池电量，应用必须在工作完成之后停止其服务。 如有必要，其他组件可以通过调用 stopService() 来停止服务。
	即使为服务启用了绑定，一旦服务收到对 onStartCommand() 的调用，您始终仍须亲自停止服务。

	绑定服务允许应用组件通过调用 bindService() 与其绑定，以便创建长期连接（通常不允许组件通过调用 startService() 来启动它）。

	要创建绑定服务，必须实现 onBind() 回调方法以返回 IBinder，用于定义与服务通信的接口。然后，其他应用组件可以调用 bindService()
	 来检索该接口，并开始对服务调用方法。服务只用于与其绑定的应用组件，因此如果没有组件绑定到服务，则系统会销毁服务
	（您不必按通过 onStartCommand() 启动的服务那样来停止绑定服务）。

	多个客户端可以同时绑定到服务。客户端完成与服务的交互后，会调用 unbindService() 取消绑定。一旦没有客户端绑定到该服务，系统就会销毁它。

	要创建绑定服务，首先必须定义指定客户端如何与服务通信的接口。 服务与客户端之间的这个接口必须是 IBinder 的实现，
	并且服务必须从 onBind() 回调方法返回它。一旦客户端收到 IBinder，即可开始通过该接口与服务进行交互。

	一旦运行起来，服务即可使用 Toast 通知或状态栏通知来通知用户所发生的事件。

	通常，当某些后台工作已经完成（例如文件下载完成）且用户现在可以对其进行操作时，状态栏通知是最佳方法。 
	当用户从展开视图中选定通知时，通知即可启动 Activity（例如查看已下载的文件）。

	前台服务被认为是用户主动意识到的一种服务，因此在内存不足时，系统也不会考虑将其终止。 前台服务必须为状态栏提供通知，
	放在“正在进行”标题下方，这意味着除非服务停止或从前台移除，否则不能清除通知。	

	要请求让服务运行于前台，请调用 startForeground()。此方法采用两个参数：唯一标识通知的整型数和状态栏的 Notification。

	Notification notification = new Notification(R.drawable.icon, getText(R.string.ticker_text),
        System.currentTimeMillis());
	Intent notificationIntent = new Intent(this, ExampleActivity.class);
	PendingIntent pendingIntent = PendingIntent.getActivity(this, 0, notificationIntent, 0);
		notification.setLatestEventInfo(this, getText(R.string.notification_title),
        	getText(R.string.notification_message), pendingIntent);
	startForeground(ONGOING_NOTIFICATION_ID, notification);

	注意：提供给 startForeground() 的整型 ID 不得为 0。

	要从前台移除服务，请调用 stopForeground()。此方法采用一个布尔值，指示是否也移除状态栏通知。 此方法不会停止服务。
	 但是，如果您在服务正在前台运行时将其停止，则通知也会被移除。

	启动服务和绑定服务这两条路径并非完全独立。也就是说，您可以绑定到已经使用 startService() 启动的服务。
	例如，可以通过使用 Intent（标识要播放的音乐）调用 startService() 来启动后台音乐服务。随后，可能在用户需要稍加控制播放器或获取有关
	当前播放歌曲的信息时，Activity 可以通过调用 bindService() 绑定到服务。在这种情况下，除非所有客户端均取消绑定，
	否则 stopService() 或 stopSelf() 不会实际停止服务。

	服务的有效生命周期从调用 onStartCommand() 或 onBind() 方法开始。每种方法均有 {Intent 对象，该对象分别传递到 startService() 或
	 bindService()。

	对于启动服务，有效生命周期与整个生命周期同时结束（即便是在 onStartCommand() 返回之后，服务仍然处于活动状态）。
	对于绑定服务，有效生命周期在 onUnbind() 返回时结束。

	对于绑定服务，只有最后一个客户端调用unbindService()取消绑定时，绑定服务才会回调onUnbind()方法。

	注：尽管启动服务是通过调用 stopSelf() 或 stopService() 来停止，但是该服务并无相应的回调（没有 onStop() 回调）。
	因此，除非服务绑定到客户端，否则在服务停止时，系统会将其销毁 ― onDestroy() 是接收到的唯一回调。


2、绑定服务

	https://developer.android.com/guide/components/bound-services.html#Basics

	绑定服务可让组件（例如 Activity）绑定到服务、发送请求、接收响应，甚至执行进程间通信 (IPC)。 
	绑定服务通常只在为其他应用组件服务时处于活动状态，不会无限期在后台运行。

	要提供服务绑定，您必须实现 onBind() 回调方法。该方法返回的 IBinder 对象定义了客户端用来与服务进行交互的编程接口。

	客户端可通过调用 bindService() 绑定到服务。调用时，它必须提供 ServiceConnection 的实现，后者会监控与服务的连接。
	bindService() 方法会立即无值返回，但当 Android 系统创建客户端与服务之间的连接时，会对 ServiceConnection 调用 onServiceConnected()，
	向客户端传递用来与服务通信的 IBinder。

	多个客户端可同时连接到一个服务。不过，只有在第一个客户端绑定时，系统才会调用服务的 onBind() 方法来检索 IBinder。
	系统随后无需再次调用 onBind()，便可将同一 IBinder 传递至任何其他绑定的客户端。

	当最后一个客户端取消与服务的绑定时，系统会将服务销毁（除非 startService() 也启动了该服务）。

	创建提供绑定的服务时，您必须提供 IBinder，用以提供客户端用来与服务进行交互的编程接口。 您可以通过三种方法定义接口：

		扩展 Binder 类
		如果服务是供您的自有应用专用，并且在与客户端相同的进程中运行（常见情况），则应通过扩展 Binder 类并从 onBind() 
		返回它的一个实例来创建接口。客户端收到 Binder 后，可利用它直接访问 Binder 实现中乃至 Service 中可用的公共方法。
		
		如果服务只是您的自有应用的后台工作线程，则优先采用这种方法。 不以这种方式创建接口的唯一原因是，您的服务被其他应用或
		不同的进程占用。

		注：之所以要求服务和客户端必须在同一应用内，是为了便于客户端转换返回的对象和正确调用其 API。服务和客户端还必须在同一进程内，
		因为此方法不执行任何跨进程编组。

		使用 Messenger
		如需让接口跨不同的进程工作，则可使用 Messenger 为服务创建接口。服务可以这种方式定义对应于不同类型 Message 对象的 Handler。
		此 Handler 是 Messenger 的基础，后者随后可与客户端分享一个 IBinder，从而让客户端能利用 Message 对象向服务发送命令。
		此外，客户端还可定义自有 Messenger，以便服务回传消息。
	
		这是执行进程间通信 (IPC) 的最简单方法，因为 Messenger 会在单一线程中创建包含所有请求的队列，这样您就不必对服务进行
		线程安全设计。

		使用 AIDL
		AIDL（Android 接口定义语言）执行所有将对象分解成原语的工作，操作系统可以识别这些原语并将它们编组到各进程中，以执行 IPC。
		 之前采用 Messenger 的方法实际上是以 AIDL 作为其底层结构。 如上所述，Messenger 会在单一线程中创建包含所有客户端请求的队列，
		以便服务一次接收一个请求。 不过，如果您想让服务同时处理多个请求，则可直接使用 AIDL。 在此情况下，
		您的服务必须具备多线程处理能力，并采用线程安全式设计。

		如需直接使用 AIDL，您必须创建一个定义编程接口的 .aidl 文件。Android SDK 工具利用该文件生成一个实现接口并处理 IPC 的抽象类，
		您随后可在服务内对其进行扩展。

		注：大多数应用“都不会”使用 AIDL 来创建绑定服务，因为它可能要求具备多线程处理能力，并可能导致实现的复杂性增加。

	绑定是异步的。bindService() 会立即返回，“不会”使 IBinder 返回客户端。要接收 IBinder，客户端必须创建一个 ServiceConnection 实例，
	并将其传递给 bindService()。ServiceConnection 包括一个回调方法，系统通过调用它来传递 IBinder。

	注：只有 Activity、服务和内容提供程序可以绑定到服务 ― 您无法从广播接收器绑定到服务。

	因此，要想从您的客户端绑定到服务，您必须：

		1.实现 ServiceConnection。
			您的实现必须重写两个回调方法：
			onServiceConnected()
			系统会调用该方法以传递服务的　onBind() 方法返回的 IBinder。

			onServiceDisconnected()
			ndroid 系统会在与服务的连接意外中断时（例如当服务崩溃或被终止时）调用该方法。
			当客户端取消绑定时，系统“不会”调用该方法。

		2.调用 bindService()，传递 ServiceConnection 实现。

		3.当系统调用您的 onServiceConnected() 回调方法时，您可以使用接口定义的方法开始调用服务。

		4.要断开与服务的连接，请调用 unbindService()。

			如果应用在客户端仍绑定到服务时销毁客户端，则销毁会导致客户端取消绑定。
			 更好的做法是在客户端与服务交互完成后立即取消绑定客户端。 这样可以关闭空闲服务。

	bindService() 的第一个参数是一个 Intent，用于显式命名要绑定的服务（但 Intent 可能是隐式的）。第二个参数是 ServiceConnection 对象
	第三个参数是一个指示绑定选项的标志。它通常应该是 BIND_AUTO_CREATE，以便创建尚未激活的服务。
	其他可能的值为 BIND_DEBUG_UNBIND 和 BIND_NOT_FOREGROUND，或 0（表示无）。

	以下是一些有关绑定到服务的重要说明：

		1.您应该始终捕获 DeadObjectException 异常，它们是在连接中断时引发的。这是远程方法引发的唯一异常。

		2.如果您只需要在 Activity 可见时与服务交互，则应在 onStart() 期间绑定，在 onStop() 期间取消绑定。

		3.如果您希望 Activity 在后台停止运行状态下仍可接收响应，则可在 onCreate() 期间绑定，在 onDestroy() 期间取消绑定。
		请注意，这意味着您的 Activity 在其整个运行过程中（甚至包括后台运行期间）都需要使用服务，因此如果服务位于其他进程内，
		那么当您提高该进程的权重时，系统终止该进程的可能性会增加。

		注：通常情况下，切勿在 Activity 的 onResume() 和 onPause() 期间绑定和取消绑定，因为每一次生命周期转换都会发生这些回调，
		您应该使发生在这些转换期间的处理保持在最低水平。此外，如果您的应用内的多个 Activity 绑定到同一服务，
		并且其中两个 Activity 之间发生了转换，则如果当前 Activity 在下一个 Activity 绑定（恢复期间）之前取消绑定（暂停期间），
		系统可能会销毁服务并重建服务。 

	如果您的服务已启动并接受绑定，则当系统调用您的 onUnbind() 方法时，如果您想在客户端下一次绑定到服务时接收 onRebind() 调用，
	则可选择返回 true。onRebind() 返回空值，但客户端仍在其 onServiceConnected() 回调中接收 IBinder。

	注：只有允许不同应用的客户端用 IPC 方式访问服务，并且想要在服务中处理多线程时，才有必要使用 AIDL。


3、Android 接口定义语言 (AIDL)

	https://developer.android.com/guide/components/aidl.html

	您可以利用它定义客户端与服务使用进程间通信 (IPC) 进行相互通信时都认可的编程接口。 如果您不需要执行跨越不同应用的并发 IPC，
	就应该通过实现一个 Binder 创建接口；或者，如果您想执行 IPC，但根本不需要处理多线程，则使用 Messenger 类来实现接口。

	在 Android 上，一个进程通常无法访问另一个进程的内存。 尽管如此，进程需要将其对象分解成操作系统能够识别的原语，
	并将对象编组成跨越边界的对象。

	AIDL 接口的实现必须是完全线程安全实现。

	oneway 关键字用于修改远程调用的行为。使用该关键字时，远程调用不会阻塞；它只是发送事务数据并立即返回。接口的实现最终接收此调用时，
	是以正常远程调用形式将其作为来自 Binder 线程池的常规调用进行接收。 如果 oneway 用于本地调用，则不会有任何影响，调用仍是同步调用。

	您必须使用 Java 编程语言语法在 .aidl 文件中定义 AIDL 接口，然后将它保存在托管服务的应用以及任何其他绑定到服务的应用的源代码
	（src/ 目录）内。

	您开发每个包含 .aidl 文件的应用时，Android SDK 工具都会生成一个基于该 .aidl 文件的 IBinder 接口，并将其保存在项目的 gen/ 目录中。

	如需使用 AIDL 创建绑定服务，请执行以下步骤：

		1.创建 .aidl 文件
		此文件定义带有方法签名的编程接口。

		2.实现接口
		Android SDK 工具基于您的 .aidl 文件，使用 Java 编程语言生成一个接口。此接口具有一个名为 Stub 的内部抽象类，
		用于扩展 Binder 类并实现 AIDL 接口中的方法。您必须扩展 Stub 类并实现方法。

		3.向客户端公开该接口
		实现 Service 并重写 onBind() 以返回 Stub 类的实现。

		注意：在 AIDL 接口首次发布后对其进行的任何更改都必须保持向后兼容性，以避免中断其他应用对您的服务的使用。 
		也就是说，因为必须将您的 .aidl 文件复制到其他应用，才能让这些应用访问您的服务的接口，因此您必须保留对原始接口的支持。

	1. 创建 .aidl 文件
		
		AIDL 使用简单语法，使您能通过可带参数和返回值的方法来声明接口。参数和返回值可以是任意类型，甚至可以是其他 AIDL 生成的接口。

		您必须使用 Java 编程语言构建 .aidl 文件。每个 .aidl 文件都必须定义单个接口，并且只需包含接口声明和方法签名。

		1.Java 编程语言中的所有原语类型（如 int、long、char、boolean 等等）
		2.String
		3.CharSequence
		4.List。List 中的所有元素都必须是以上列表中支持的数据类型、其他 AIDL 生成的接口或您声明的可打包类型。
		 可选择将 List 用作“通用”类（例如，List<String>）。另一端实际接收的具体类始终是 ArrayList，但生成的方法使用的是 List 接口。
		5.Map。Map 中的所有元素都必须是以上列表中支持的数据类型、其他 AIDL 生成的接口或您声明的可打包类型。 
		不支持通用 Map（如 Map<String,Integer> 形式的 Map）。 另一端实际接收的具体类始终是 HashMap，但生成的方法使用的是 Map 接口。

		您必须为以上未列出的每个附加类型加入一个 import 语句，即使这些类型是在与您的接口相同的软件包中定义。

		定义服务接口时，请注意：

		1.方法可带零个或多个参数，返回值或空值。
		2.所有非原语参数都需要指示数据走向的方向标记。可以是 in、out 或 inout（见以下示例）。
		原语默认为 in，不能是其他方向。
		注意：您应该将方向限定为真正需要的方向，因为编组参数的开销极大。
		3..aidl 文件中包括的所有代码注释都包含在生成的 IBinder 接口中（import 和 package 语句之前的注释除外）
		4.只支持方法；您不能公开 AIDL 中的静态字段。

		只需将您的 .aidl 文件保存在项目的 src/ 目录内，SDK 工具会在项目的 gen/ 目录中生成 IBinder 接口文件。
		生成的文件名与 .aidl 文件名一致，只是使用了 .java 扩展名（例如，IRemoteService.aidl 生成的文件名是 IRemoteService.java）。

	2. 实现接口

		生成的接口包括一个名为 Stub 的子类，这个子类是其父接口（例如，YourInterface.Stub）的抽象实现，
		用于声明 .aidl 文件中的所有方法。

		注：Stub 还定义了几个帮助程序方法，其中最引人关注的是 asInterface()，该方法带 IBinder
		（通常便是传递给客户端 onServiceConnected() 回调方法的参数）并返回存根接口实例。
	
		在实现 AIDL 接口时应注意遵守以下这几个规则：

			1.由于不能保证在主线程上执行传入调用，因此您一开始就需要做好多线程处理准备，并将您的服务正确地编译为线程安全服务。
			
			2.默认情况下，RPC 调用是同步调用。如果您明知服务完成请求的时间不止几毫秒，就不应该从 Activity 的主线程调用服务，
			因为这样做可能会使应用挂起（Android 可能会显示“Application is Not Responding”对话框）― 您通常应该从客户端内的
			单独线程调用服务。

			3.您引发的任何异常都不会回传给调用方。

	3. 向客户端公开该接口
		
		 要为您的服务公开该接口，请扩展 Service 并实现 onBind()，以返回一个类实例，这个类实现了生成的 Stub

		客户端还必须具有对 interface 类的访问权限，因此如果客户端和服务在不同的应用内，则客户端的应用 src/ 目录内必须包含 .aidl 文件
		（它生成 android.os.Binder 接口 ― 为客户端提供对 AIDL 方法的访问权限）的副本。

		当客户端在 onServiceConnected() 回调中收到 IBinder 时，它必须调用 YourServiceInterface.Stub.asInterface(service) 
		以将返回的参数转换成 YourServiceInterface 类型。

	通过 IPC 接口把某个类从一个进程发送到另一个进程是可以实现的。 不过，您必须确保该类的代码对 IPC 通道的另一端可用，
	并且该类必须支持 Parcelable 接口。

	支持 Parcelable 接口很重要，因为 Android 系统可通过它将对象分解成可编组到各进程的原语。

	如需创建支持 Parcelable 协议的类，您必须执行以下操作：

		1.让您的类实现 Parcelable 接口。
		2.实现 writeToParcel，它会获取对象的当前状态并将其写入 Parcel。
		3.为您的类添加一个名为 CREATOR 的静态字段，这个字段是一个实现 Parcelable.Creator 接口的对象。
		4.最后，创建一个声明可打包类的 .aidl 文件（按照下文 Rect.aidl 文件所示步骤）。
		如果您使用的是自定义编译进程，切勿在您的编译中添加 .aidl 文件。 此 .aidl 文件与 C 语言中的头文件类似，并未编译。

	AIDL 在它生成的代码中使用这些方法和字段将您的对象编组和取消编组。

	调用类必须执行以下步骤，才能调用使用 AIDL 定义的远程接口：

		1.在项目 src/ 目录中加入 .aidl 文件。
		2.声明一个 IBinder 接口实例（基于 AIDL 生成）。
		3.实现 ServiceConnection。
		4.调用 Context.bindService()，以传入您的 ServiceConnection 实现。
		5.在您的 onServiceConnected() 实现中，您将收到一个 IBinder 实例（名为 service）。
		调用 YourInterfaceName.Stub.asInterface((IBinder)service)，以将返回的参数转换为 YourInterface 类型。
		6.调用您在接口上定义的方法。您应该始终捕获 DeadObjectException 异常，它们是在连接中断时引发的；这将是远程方法引发的唯一异常。
		7.如需断开连接，请使用您的接口实例调用 Context.unbindService()。