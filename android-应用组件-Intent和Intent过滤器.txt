1、Intent 和 Intent 过滤器

	https://developer.android.com/guide/components/intents-filters.html

	Intent 是一个消息传递对象，您可以使用它从其他应用组件请求操作。尽管 Intent 可以通过多种方式促进组件之间的通信，
	但其基本用例主要包括以下三个：

	1.启动 Activity：

		Intent 描述了要启动的 Activity，并携带了任何必要的数据。

		如果您希望在 Activity 完成后收到结果，请调用 startActivityForResult()。在 Activity 的 onActivityResult() 回调中，
		您的 Activity 将结果作为单独的 Intent 对象接收。

	2.启动服务：

		Intent 描述了要启动的服务，并携带了任何必要的数据。

		如果服务旨在使用客户端-服务器接口，则通过将 Intent 传递给 bindService()，您可以从其他组件绑定到此服务。

	3.传递广播：

		广播是任何应用均可接收的消息。系统将针对系统事件（例如：系统启动或设备开始充电时）传递各种广播。
		通过将 Intent 传递给 sendBroadcast()、sendOrderedBroadcast() 或 sendStickyBroadcast()，您可以将广播传递给其他应用。

	Intent 分为两种类型：

		1.显式 Intent：按名称（完全限定类名）指定要启动的组件。 通常，您会在自己的应用中使用显式 Intent 来启动组件，
		这是因为您知道要启动的 Activity 或服务的类名。

		2.隐式 Intent ：不会指定特定的组件，而是声明要执行的常规操作，从而允许其他应用中的组件来处理它。 
		例如，如需在地图上向用户显示位置，则可以使用隐式 Intent，请求另一具有此功能的应用在地图上显示指定的位置。

		创建隐式 Intent 时，Android 系统通过将 Intent 的内容与在设备上其他应用的清单文件中声明的 Intent 过滤器进行比较，
		从而找到要启动的相应组件。 如果 Intent 与 Intent 过滤器匹配，则系统将启动该组件，并向其传递 Intent 对象。 
		如果多个 Intent 过滤器兼容，则系统会显示一个对话框，支持用户选取要使用的应用。

	Intent 过滤器是应用清单文件中的一个表达式，它指定该组件要接收的 Intent 类型。 例如，通过为 Activity 声明 Intent 过滤器，
	您可以使其他应用能够直接使用某一特定类型的 Intent 启动 Activity。同样，如果您没有为 Activity 声明任何 Intent 过滤器，
	则 Activity 只能通过显式 Intent 启动。

	注意：为了确保应用的安全性，启动 Service 时，请始终使用显式 Intent，且不要为服务声明 Intent 过滤器。
	使用隐式 Intent 启动服务存在安全隐患，因为您无法确定哪些服务将响应 Intent，且用户无法看到哪些服务已启动。
	从 Android 5.0（API 级别 21）开始，如果使用隐式 Intent 调用 bindService()，系统会引发异常。

	Intent 对象携带了 Android 系统用来确定要启动哪个组件的信息（例如，准确的组件名称或应当接收该 Intent 的组件类别），
	以及收件人组件为了正确执行操作而使用的信息（例如，要采取的操作以及要处理的数据）。

	注：启动 Service 时，您应始终指定组件名称。 否则，您无法确定哪项服务会响应 Intent，且用户无法看到哪项服务已启动。

	Intent 的这一字段是一个 ComponentName 对象，您可以使用目标组件的完全限定类名指定此对象，其中包括应用的软件包名称。 
	例如， com.example.ExampleActivity。您可以使用 setComponent()、setClass()、setClassName() 或 Intent 构造函数设置组件名称。

	操作

		指定要执行的通用操作（例如，“查看”或“选取”）的字符串。

		对于广播 Intent，这是指已发生且正在报告的操作。操作在很大程度上决定了其余 Intent 的构成，特别是数据和 extra 中包含的内容。

		您可以指定自己的操作，供 Intent 在您的应用内使用（或者供其他应用在您的应用中调用组件）。
		但是，您通常应该使用由 Intent 类或其他框架类定义的操作常量。以下是一些用于启动 Activity 的常见操作：

		ACTION_VIEW
		如果您拥有一些某项 Activity 可向用户显示的信息（例如，要使用图库应用查看的照片；或者要使用地图应用查看的地址），
		请使用 Intent 将此操作与 startActivity() 结合使用。

		ACTION_SEND
		这也称为“共享”Intent。如果您拥有一些用户可通过其他应用（例如，电子邮件应用或社交共享应用）共享的数据，
		则应使用 Intent 将此操作与 startActivity() 结合使用。

		您可以使用 setAction() 或 Intent 构造函数为 Intent 指定操作。

		如果定义自己的操作，请确保将应用的软件包名称作为前缀。 
		例如：static final String ACTION_TIMETRAVEL = "com.example.action.TIMETRAVEL";

	数据

		引用待操作数据和/或该数据 MIME 类型的 URI（Uri 对象）。提供的数据类型通常由 Intent 的操作决定。
		例如，如果操作是 ACTION_EDIT，则数据应包含待编辑文档的 URI。

		创建 Intent 时，除了指定 URI 以外，指定数据类型（其 MIME 类型）往往也很重要。例如，能够显示图像的 Activity 可能无法
		播放音频文件，即便 URI 格式十分类似时也是如此。因此，指定数据的 MIME 类型有助于 Android 系统找到接收 Intent 的最佳组件。
		但有时，MIME 类型可以从 URI 中推断得出，特别当数据是content: URI 时尤其如此。这表明数据位于设备中，且由 ContentProvider 控制，
		这使得数据 MIME 类型对系统可见。

		要仅设置数据 URI，请调用 setData()。 要仅设置 MIME 类型，请调用 setType()。
		如有必要，您可以使用 setDataAndType() 同时显式设置二者。

		注意：若要同时设置 URI 和 MIME 类型，请勿调用 setData() 和 setType()，因为它们会互相抵消彼此的值。
		请始终使用 setDataAndType() 同时设置 URI 和 MIME 类型。

	类别

		一个包含应处理Intent 组件类型的附加信息的字符串。您可以将任意数量的类别描述放入一个 Intent 中，但大多数 Intent 均不需要类别。
		以下是一些常见类别：

		CATEGORY_BROWSABLE
		目标 Activity 允许本身通过网络浏览器启动，以显示链接引用的数据，如图像或电子邮件。

		CATEGORY_LAUNCHER
		该 Activity 是任务的初始 Activity，在系统的应用启动器中列出。

		您可以使用 addCategory() 指定类别。

	以上列出的这些属性（组件名称、操作、数据和类别）表示 Intent 的既定特征。 通过读取这些属性，Android 系统能够解析应当启动哪个应用组件。
	但是，Intent 也有可能会一些携带不影响其如何解析为应用组件的信息。 Intent 还可以提供：

	Extra

		携带完成请求操作所需的附加信息的键值对。正如某些操作使用特定类型的数据 URI 一样，有些操作也使用特定的 extra。
	
		您可以使用各种 putExtra() 方法添加 extra 数据，每种方法均接受两个参数：键名和值。您还可以创建一个包含所有 extra 数据的 
		Bundle 对象，然后使用 putExtras() 将Bundle 插入 Intent 中。

		例如，使用 ACTION_SEND 创建用于发送电子邮件的 Intent 时，可以使用 EXTRA_EMAIL 键指定“目标”收件人，
		并使用 EXTRA_SUBJECT 键指定“主题”。

		Intent 类将为标准化的数据类型指定多个 EXTRA_* 常量。如需声明自己的 extra 键（对于应用接收的 Intent），
		请确保将应用的软件包名称作为前缀。 例如：static final String EXTRA_GIGAWATTS = "com.example.EXTRA_GIGAWATTS";

	标志

		在 Intent 类中定义的、充当 Intent 元数据的标志。标志可以指示 Android 系统如何启动 Activity（例如，Activity 应属于哪个任务），
		以及启动之后如何处理（例如，它是否属于最近的 Activity 列表）。使用setFlags() 方法。

	注意：用户可能没有任何应用处理您发送到 startActivity() 的隐式 Intent。如果出现这种情况，则调用将会失败，且应用会崩溃。
	要验证 Activity 是否会接收 Intent，请对 Intent 对象调用 resolveActivity()。如果结果为非空，则至少有一个应用能够处理该 Intent，
	且可以安全调用 startActivity()。 如果结果为空，则不应使用该 Intent。如有可能，您应停用发出该 Intent 的功能。
	if (sendIntent.resolveActivity(getPackageManager()) != null) {
    		startActivity(sendIntent);
	}

	如果有多个应用响应隐式 Intent，则用户可以选择要使用的应用，并将其设置为该操作的默认选项。但是，如果多个应用可以响应 Intent，
	且用户可能希望每次使用不同的应用，则应采用显式方式显示选择器对话框。 

	要显示选择器，请使用 createChooser() 创建 Intent，并将其传递给 startActivity()。例如：

		Intent sendIntent = new Intent(Intent.ACTION_SEND);
		String title = getResources().getString(R.string.chooser_title);
		Intent chooser = Intent.createChooser(sendIntent, title);
		if (sendIntent.resolveActivity(getPackageManager()) != null) {
    			startActivity(chooser);
		}

	要公布应用可以接收哪些隐式 Intent，请在清单文件中使用 <intent-filter> 元素为每个应用组件声明一个或多个 Intent 过滤器。
	每个 Intent 过滤器均根据 Intent 的操作、数据和类别指定自身接受的 Intent 类型。

	注：显式 Intent 始终会传递给其目标，无论组件声明的 Intent 过滤器如何均是如此。

	在 <intent-filter> 内部，您可以使用以下三个元素中的一个或多个指定要接受的 Intent 类型：

		<action>
		在 name 属性中，声明接受的 Intent 操作。该值必须是操作的文本字符串值，而不是类常量。

		<data>
		使用一个或多个指定数据 URI 各个方面（scheme、host、port、path 等）和 MIME 类型的属性，声明接受的数据类型。

		<category>
		在 name 属性中，声明接受的 Intent 类别。该值必须是操作的文本字符串值，而不是类常量。
	
		CATEGORY_LAUNCHER 类别指示此 Activity 的图标应放入系统的应用启动器。 如果 <activity> 元素未使用 icon 指定图标，
		则系统将使用 <application> 元素中的图标。

	注：为了接收隐式 Intent，必须将 CATEGORY_DEFAULT 类别包括在 Intent 过滤器中。 方法 startActivity() 和 startActivityForResult() 将
	按照已申明 CATEGORY_DEFAULT 类别的方式处理所有 Intent。 如果未在 Intent 过滤器中声明此类别，则隐式 Intent 不会解析为您的 Activity。

	隐式 Intent 若要传递给组件，必须通过所有这三项测试。如果 Intent 甚至无法匹配其中任何一项测试，则 Android 系统不会将其传递给组件。 
	但是，由于一个组件可能有多个 Intent 过滤器，因此未能通过某一组件过滤器的 Intent 可能会通过另一过滤器。

	尽管 Intent 过滤器将组件限制为仅响应特定类型的隐式 Intent，但如果开发者确定您的组件名称，则其他应用有可能通过使用显式 Intent 
	启动您的应用组件。如果必须确保只有您自己的应用才能启动您的某一组件，请针对该组件将 exported 属性设置为 "false"。

	注意：为了避免无意中运行不同应用的 Service，请始终使用显式 Intent 启动您自己的服务，且不必为该服务声明 Intent 过滤器。

	注：对于所有 Activity，您必须在清单文件中声明 Intent 过滤器。但是，广播接收器的过滤器可以通过调用 registerReceiver() 动态注册。

	注：MIME 类型 application/vnd.google.panorama360+jpg 是一个指定全景照片的特殊数据类型，您可以使用 Google panorama API 对其进行处理。

	PendingIntent 对象是 Intent 对象的包装器。PendingIntent 的主要目的是授权外部应用使用包含的 Intent，
	就像是它从您应用本身的进程中执行的一样。

	待定 Intent 的主要用例包括：

		1.声明用户使用您的通知执行操作时所要执行的 Intent（Android 系统的 NotificationManager 执行 Intent）。

		2.声明用户使用您的 应用小部件执行操作时要执行的 Intent（主屏幕应用执行 Intent）。

		3.声明未来某一特定时间要执行的 Intent（Android 系统的 AlarmManager 执行 Intent）。

	使用待定 Intent 时，应用不会使用调用（如 startActivity()）执行该 Intent。相反，通过调用相应的创建器方法创建 PendingIntent 时，
	您必须声明所需的组件类型：

		1.PendingIntent.getActivity()，适用于启动 Activity 的 Intent。

		2.PendingIntent.getService()，适用于启动 Service 的 Intent。

		3.PendingIntent.getBroadcast()，适用于启动 BroadcastReceiver 的 Intent。

		除非您的应用正在从其他应用中接收待定 Intent，否则上述用于创建 PendingIntent 的方法可能是您所需的唯一 PendingIntent 方法。

		每种方法均会提取当前的应用 Context、您要包装的 Intent 以及一个或多个指定应如何使用该 Intent 的标志
		（例如，是否可以多次使用该 Intent）。

	操作测试

		要指定接受的 Intent 操作，Intent 过滤器既可以不声明任何 <action> 元素，也可以声明多个此类元素。

		要通过此过滤器，您在 Intent 中指定的操作必须与过滤器中列出的某一操作匹配。

		如果该过滤器未列出任何操作，则 Intent 没有任何匹配项，因此所有 Intent 均无法通过测试。 但是，如果 Intent 未指定操作，
		则会通过测试（只要过滤器至少包含一个操作）。

	类别测试

		要指定接受的 Intent 类别， Intent 过滤器既可以不声明任何 <category> 元素，也可以声明多个此类元素。

		若要使 Intent 通过类别测试，则 Intent 中的每个类别均必须与过滤器中的类别匹配。
		反之则未必然，Intent 过滤器声明的类别可以超出 Intent 中指定的数量，且 Intent 仍会通过测试。 
		因此，不含类别的 Intent 应当始终会通过此测试，无论过滤器中声明何种类别均是如此。

	注：Android 会自动将 CATEGORY_DEFAULT 类别应用于传递给 startActivity() 和 startActivityForResult() 的所有隐式 Intent。
	因此，如需 Activity 接收隐式 Intent，则必须将 "android.intent.category.DEFAULT" 的类别包括在其 Intent 过滤器中

	数据测试

		要指定接受的 Intent 数据， Intent 过滤器既可以不声明任何 <data> 元素，也可以声明多个此类元素。

		每个 <data> 元素均可指定 URI 结构和数据类型（MIME 媒体类型）。 URI 的每个部分均包含单独的 scheme、host、port 和 path 属性：
		<scheme>://<host>:<port>/<path> 例如：content://com.example.project:200/folder/subfolder/etc

		在 <data> 元素中，上述每个属性均为可选，但存在线性依赖关系：

			1.如果未指定架构，则会忽略主机。
			2.如果未指定主机，则会忽略端口。
			3.如果未指定架构和主机，则会忽略路径。
	
		将 Intent 中的 URI 与过滤器中的 URI 规范进行比较时，它仅与过滤器中包含的部分 URI 进行比较。 例如：

			1.如果过滤器仅指定架构，则具有该架构的所有 URI 均与该过滤器匹配。
			2.如果过滤器指定架构和权限，但未指定路径，则具有相同架构和权限的所有 URI 都会通过过滤器，无论其路径如何均是如此。
			3.如果过滤器指定架构、权限和路径，则仅具有相同架构、权限和路径的 URI 才会通过过滤器。

			注：路径规范可以包含星号通配符 (*)，因此仅需部分匹配路径名即可。

		数据测试会将 Intent 中的 URI 和 MIME 类型与过滤器中指定的 URI 和 MIME 类型进行比较。 规则如下：

			a.仅当过滤器未指定任何 URI 或 MIME 类型时，不含 URI 和 MIME 类型的 Intent 才会通过测试。

			b.对于包含 URI 但不含 MIME 类型（既未显式声明，也无法通过 URI 推断得出）的 Intent，
			仅当其 URI 与过滤器的 URI 格式匹配、且过滤器同样未指定 MIME 类型时，才会通过测试。

			c.仅当过滤器列出相同的 MIME 类型且未指定 URI 格式时，包含 MIME 类型、但不含 URI 的 Intent 才会通过测试。

			d.仅当 MIME 类型与过滤器中列出的类型匹配时，同时包含 URI 类型和 MIME 类型（通过显式声明，或可以通过 URI 推断得出）的 
			Intent 才会通过测试的 MIME 类型部分。 如果 Intent 的 URI 与过滤器中的 URI 匹配，或者如果 Intent 具有 content: 或 
			file: URI 且过滤器未指定 URI，则 Intent 会通过测试的 URI 部分。 换言之，如果过滤器只是列出 MIME 类型，
			则假定组件支持 content: 和 file: 数据。

	您的应用可以采用类似的方式使用 Intent 匹配。PackageManager 提供了一整套 query...() 方法来返回所有能够接受特定 Intent 的组件。
	此外，它还提供了一系列类似的 resolve...() 方法来确定响应 Intent 的最佳组件。 例如，queryIntentActivities() 将返回能够执行那些作为
	参数传递的 Intent 的所有 Activity 列表，而 queryIntentServices() 则可返回类似的服务列表。这两种方法均不会激活组件，
	而只是列出能够响应的组件。 对于广播接收器，有一种类似的方法： queryBroadcastReceivers()。


2、通用 Intent

	https://developer.android.com/guide/components/intents-common.html

	当您调用 startActivity() 或 startActivityForResult() 并向其传递隐式 Intent 时，
	系统会 将 Intent 解析为可处理该 Intent 的应用并启动其对应的 Activity。 

	注意：如果设备上没有可接收隐式 Intent 的应用，您的应用将在调用 startActivity() 时崩溃。如需事先验证是否存在可接收 Intent 的应用，
	请对 Intent 对象调用 resolveActivity()。如果结果为非空，则至少有一个应用能够处理该 Intent，并且可以安全调用 startActivity()。 
	如果结果为空，则您不应使用该 Intent。如有可能，您应停用调用该 Intent 的功能。

	创建闹铃

	如需创建新闹铃，请使用 ACTION_SET_ALARM 操作并使用下文介绍的 extra 指定时间和消息等闹铃详细信息。

	注：Android 2.3（API 级别 9）及更高版本上只提供了小时、分钟和消息 extra。 其他 extra 是在更新版本的平台上新增的 extra。

	注：为了调用 ACTION_SET_ALARM Intent，您的应用必须具有 SET_ALARM 权限：
	<uses-permission android:name="com.android.alarm.permission.SET_ALARM" />

	创建定时器

	如需创建倒计时器，请使用 ACTION_SET_TIMER 操作并使用下文介绍的 extra 指定持续时间等定时器详细信息。

	注：此 Intent 是在 Android 4.4（API 级别 19）中添加的。
	
	注：为了调用 ACTION_SET_TIMER Intent，您的应用必须具有 SET_ALARM 权限：
	<uses-permission android:name="com.android.alarm.permission.SET_ALARM" />

	显示所有闹铃

	如需显示闹铃列表，请使用 ACTION_SHOW_ALARMS 操作。

	尽管调用此 Intent 的应用并不多（使用它的主要是系统应用），但任何充当闹钟的应用都应实现此 Intent 过滤器，
	并通过显示现有闹铃列表作出响应。

	注：此 Intent 是在 Android 4.4（API 级别 19）中添加的。

	添加日历事件

	如需向用户的日历添加新事件，请使用 ACTION_INSERT 操作指定具有 Events.CONTENT_URI 的数据 URI。
	然后您就可以使用下文介绍的 extra 指定事件的各类详细信息。

	MIME 类型 "vnd.android.cursor.dir/event"

	可使用 CalendarContract.EventsColumns 类中定义的常量指定许多其他事件详细信息。


	拍摄照片或视频并将其返回

	如需打开相机应用并接收拍摄的照片或视频，请使用 ACTION_IMAGE_CAPTURE 或 ACTION_VIDEO_CAPTURE 操作。此外，
	还可在 EXTRA_OUTPUT extra 中指定您希望相机将照片或视频保存到的 URI 位置。

	EXTRA_OUTPUT：相机应用应将照片或视频文件保存到的 URI 位置（Uri 对象形式）

	当相机应用成功将焦点归还给您的 Activity（您的应用收到 onActivityResult() 回调）时，您可以按通过 EXTRA_OUTPUT 值指定的 URI 访问
	照片或视频。

	注：当您使用 ACTION_IMAGE_CAPTURE 拍摄照片时，相机可能还会在结果 Intent 中返回缩小尺寸的照片副本（缩略图），
	这个副本以 Bitmap 形式保存在名为 "data" 的 extra 字段中。


	以静态图像模式启动相机应用

	如需以静态图像模式打开相机应用，请使用 INTENT_ACTION_STILL_IMAGE_CAMERA 操作。


	以视频模式启动相机应用
	
	如需以视频模式打开相机应用，请使用 INTENT_ACTION_VIDEO_CAMERA 操作。

	
	选择联系人

	如需让用户选择联系人和为您的应用提供对所有联系人信息的访问权限，请使用 ACTION_PICK 操作，并将 MIME 类型指定为 Contacts.CONTENT_TYPE。

	传送至您的 onActivityResult() 回调的结果 Intent 包含指向所选联系人的 content: URI。
	响应会利用 Contacts Provider API 为您的应用授予该联系人的临时读取权限，即使您的应用不具备 READ_CONTACTS 权限也没有关系。

	提示：如果您只需要访问某一条联系人信息（如电话号码或电子邮件地址），请改为参见下一节的内容，其中介绍了如何选择特定联系人数据。

	如需了解有关在获得联系人 URI 后如何检索联系人详情的信息，请阅读检索联系人详情。 请谨记，使用以上 Intent 检索联系人 URI 时，
	读取该联系人的详情并不需要 READ_CONTACTS 权限。


	选择特定联系人数据

	如需让用户选择某一条联系人信息，如电话号码、电子邮件地址或其他数据类型，请使用ACTION_PICK 操作，
	并将 MIME 类型指定为下列其中一个内容类型（如 CommonDataKinds.Phone.CONTENT_TYPE），以获取联系人的电话号码。

	如果您只需要检索一种类型的联系人数据，则将此方法与来自 ContactsContract.CommonDataKinds 类的 CONTENT_TYPE 配合使用要比
	使用 Contacts.CONTENT_TYPE（如上一部分中所示）更高效，因为结果可让您直接访问所需数据，无需对联系人提供程序执行更复杂的查询。

	传送至您的 onActivityResult() 回调的结果 Intent 包含指向所选联系人数据的 content:URI。响应会为您的应用授予该联系人数据的临时读取权限，
	即使您的应用不具备 READ_CONTACTS 权限也没有关系。

	MIME 类型
		CommonDataKinds.Phone.CONTENT_TYPE
		从有电话号码的联系人中选取。
		CommonDataKinds.Email.CONTENT_TYPE
		从有电子邮件地址的联系人中选取。
		CommonDataKinds.StructuredPostal.CONTENT_TYPE
		从有邮政地址的联系人中选取。
	
		或者 ContactsContract 下众多其他 CONTENT_TYPE 值中的一个。
	